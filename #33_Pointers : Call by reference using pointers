برافو سفيان! دابا دخلتي فواحد الموضوع مهم:  
✅ **Call by Reference using Pointers**  
بمعنى: كيفاش تمرّر متغير لدالة باستعمال **pointer** باش تغيّر قيمته من داخل الدالة.

---

## 🔷 الهدف:

نستعمل **pointer** باش الدالة تقدر **تعدل المتغير الأصلي** (ماشي نسخة منه).

---

## 🔹 الطريقة:

1. تمرّر **عنوان المتغير** للدالة.
2. داخل الدالة، تستعمل `*` (dereferencing) باش توصل للقيمة وتغيّرها.

---

## ✅ مثال عملي:

```cpp
#include <iostream>
using namespace std;

// دالة كتستعمل pointer لتغيير قيمة المتغير
void changeValue(int* ptr) {
    *ptr = 100;  // dereference وتغيير القيمة
}

int main() {
    int x = 10;
    changeValue(&x);  // نمرر عنوان x
    cout << "القيمة بعد التغيير: " << x << endl;  // النتيجة: 100
    return 0;
}
```

---

## 🔍 الشرح خطوة بخطوة:

| السطر              | المعنى                                               |
|--------------------|------------------------------------------------------|
| `int* ptr`         | الدالة كتستقبل pointer لعدد صحيح                     |
| `*ptr = 100`       | dereferencing لتغيير القيمة فالعنوان لي كيشير ليه   |
| `changeValue(&x);` | نمرر عنوان `x` (يعني: `&x`) للدالة                  |

---

## 🧠 علاش نسميها "Call by Reference using Pointers"؟

- **Call by Value** = كندوز نسخة فقط → التغيير ما يأثرش.
- **Call by Reference** = كندوز المرجع أو العنوان → التغيير يبقى.

هنا، **pointer** كيلعب دور "المرجع"، حيث كتدوز **العنوان** ديال المتغير.

---

## ❗ ملاحظة:

ضروري تمرر **العنوان** عند النداء:
```cpp
changeValue(&x);  // وليس changeValue(x);
```

وإلا غادي يطيح البرنامج أو مايغير والو.

---

## 🔄 مقارنة صغيرة مع Reference مباشرة:

```cpp
void changeValue(int& ref) {
    ref = 100;
}
```

نفس النتيجة، لكن بدون `*` أو `&`، أسهل في الاستعمال.  
↪ لكن استعمال **Pointers** ضروري فـ الديناميك ميموري، المصفوفات، و C-style code.

---

