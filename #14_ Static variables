جميل يا سفيان، الآن ندخل على **المتغيرات `static` في C++** — من أهم المفاهيم اللي تفيدك في الدوال والكائنات (objects) وتساعدك تتحكم في عمر المتغير ومجاله.

---

## 🧱 ما هو المتغير `static`؟

### 📌 ببساطة:
`static` يعني أن المتغير **يحتفظ بقيمته بين الاستدعاءات** ولا يتم تهيئته من جديد كل مرة.

---

## 🔁 مثال توضيحي بدون `static`:

```cpp
#include <iostream>
using namespace std;

void Count() {
    int x = 0;
    x++;
    cout << x << endl;
}

int main() {
    Count();  // يطبع 1
    Count();  // يطبع 1
    Count();  // يطبع 1
}
```

🔹 كل مرة يتم استدعاء الدالة، يتم إنشاء المتغير `x` من جديد، لذلك دائمًا يبدأ من الصفر ويطبع 1.

---

## 🧠 مثال مع `static`:

```cpp
#include <iostream>
using namespace std;

void Count() {
    static int x = 0;
    x++;
    cout << x << endl;
}

int main() {
    Count();  // يطبع 1
    Count();  // يطبع 2
    Count();  // يطبع 3
}
```

### ⚙️ ماذا حصل؟
- المتغير `x` تم إنشاؤه **مرة واحدة فقط** في أول استدعاء.
- قيمته محفوظة في الذاكرة طول فترة تشغيل البرنامج.
- لذلك كل مرة تزيد قيمته ويُحتفظ بها في الاستدعاء التالي.

---

## 🧭 أين نستخدم `static` في C++؟

### 1. داخل الدوال:
للحفاظ على القيمة بين الاستدعاءات كما رأيت.

### 2. داخل الكائنات (classes):
```cpp
class MyClass {
public:
    static int count;
};
int MyClass::count = 0;
```

🔹 هنا `count` متغير مشترك بين كل الكائنات (objects) من `MyClass`.  
🔹 **جميع الكائنات تتشارك نفس القيمة**.

---

## 🔒 خصائص المتغير `static`

| الخاصية | التفسير |
|--------|---------|
| العمر (Lifetime) | يستمر طوال مدة البرنامج |
| النطاق (Scope) | يعتمد على مكان التعريف (داخل دالة؟ كلاس؟) |
| التهيئة | تتم مرة واحدة فقط |

---

