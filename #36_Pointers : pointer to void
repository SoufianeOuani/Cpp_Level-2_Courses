برافو عليك سفيان، دخلتي دابا فـ واحد من أكثر أنواع الـ Pointers غموضًا شوية:  
# 🔷 `void*` Pointer – أو Pointer إلى نوع غير معروف

---

## ✅ ما هو `void*` ؟

`void*` هو **generic pointer** فـ C++، يعني:  
🔸 Pointer يقدر يشير لأي نوع من البيانات (`int`, `float`, `char`, `struct`...)  
🔸 لكن **ما تقدرش تتعامل مباشرة مع القيمة لي كيشير ليها حتى تحدد النوع**.

---

## 🔹 مثال:

```cpp
int x = 10;
void* ptr = &x;  // ✅ صالح، ptr كيشير لـ x
```

لكن:

```cpp
cout << *ptr;  // ❌ خطأ! ما تقدرش تعمل dereference مباشرة
```

باش تخدم بالقيمة، خاصك **تعمل casting**.

---

## 🔸 طريقة الوصول للقيمة:

```cpp
cout << *(static_cast<int*>(ptr)) << endl;  // ✅ 10
```

أو:

```cpp
cout << *((int*)ptr) << endl;  // ✅ 10 (C-style cast)
```

---

## 🔹 علاش نستعمل `void*` أصلاً؟

1. فـ الدوال العامة (Generic Functions).
2. مع المكتبات القديمة فـ C (بحال `qsort`, `malloc`).
3. باش نمرر بيانات بدون تحديد النوع مسبقًا.

---

## 🔹 مثال عملي:

```cpp
#include <iostream>
using namespace std;

void printValue(void* data, char type) {
    if (type == 'i') {
        cout << "int: " << *((int*)data) << endl;
    } else if (type == 'f') {
        cout << "float: " << *((float*)data) << endl;
    } else if (type == 'c') {
        cout << "char: " << *((char*)data) << endl;
    }
}

int main() {
    int a = 5;
    float b = 3.14;
    char c = 'X';

    printValue(&a, 'i');
    printValue(&b, 'f');
    printValue(&c, 'c');

    return 0;
}
```

🔸 النتيجة:
```
int: 5  
float: 3.14  
char: X
```

---

## ⚠️ ملاحظات مهمة:

| الشيء           | المعلومة                                       |
|------------------|------------------------------------------------|
| `void*` كيتخزن فيه | **عنوان** فقط، بلا نوع معين                      |
| ما تقدرش تعمل `*ptr` | ❌ خاصك تعمل casting قبل                         |
| مفيد مع        | الدوال العامة، الأنظمة القديمة، التخصيص العام للذاكرة |

---


