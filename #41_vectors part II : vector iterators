واااعر يا سفيان! 😎  
دابا دخلنا فـ واحد المفهوم كيخلي التعامل مع الـ `vector` احترافي بزاف:

# 🔷 Vector Iterators – المؤشرات فـ الـ vector

---

## ✅ شنو هو Iterator؟

هو **كائن خاص** كيمكنك تدور على عناصر `vector` أو أي container فـ C++، بحال pointer، وكيخدم بزاف مع STL.

---

## 🔹 1. تعريف Iterator:

```cpp
#include <vector>
#include <iostream>
using namespace std;

int main() {
    vector<int> v = {10, 20, 30};

    vector<int>::iterator it = v.begin();  // أول عنصر
    cout << *it << endl;  // ➜ 10
}
```

---

## 🔹 2. `.begin()` و `.end()`

- `v.begin()` ➜ يشير لأول عنصر  
- `v.end()` ➜ يشير **لما بعد آخر عنصر** (غير قابل للوصول مباشرة)

```cpp
for (vector<int>::iterator it = v.begin(); it != v.end(); ++it) {
    cout << *it << " ";
}
```

📤 **النتيجة:**  
`10 20 30`

---

## ✅ 3. استخدام `auto` (أسهل بزاف)

```cpp
for (auto it = v.begin(); it != v.end(); ++it) {
    cout << *it << " ";
}
```

---

## ✅ 4. تعديل القيم باستخدام Iterator

```cpp
for (auto it = v.begin(); it != v.end(); ++it) {
    *it += 5;  // كل عنصر يزيد بـ 5
}
```

---

## ✅ 5. أنواع أخرى:

| النوع             | الشرح                        |
|-------------------|-------------------------------|
| `iterator`        | قراءة وتعديل                  |
| `const_iterator`  | للقراءة فقط (ما تقدرش تغير) |
| `reverse_iterator`| يمشي من الأخير للأول         |

---

## ✅ مثال كامل:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> nums = {1, 2, 3, 4};

    // تعديل العناصر
    for (auto it = nums.begin(); it != nums.end(); ++it) {
        *it *= 2;
    }

    // طبع العناصر
    for (auto it = nums.begin(); it != nums.end(); ++it) {
        cout << *it << " ";
    }

    return 0;
}
```

📤 **الناتج:**  
`2 4 6 8`

---

## ✨ علاش نستعمل iterators؟

🔹 متوافقة مع جميع الـ STL containers  
🔹 كتمكنك من تعديل أو حذف العناصر بسهولة  
🔹 أكثر مرونة من `[]` أو `at()`

---

