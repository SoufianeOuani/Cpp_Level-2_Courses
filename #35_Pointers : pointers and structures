زوين بزاف سفيان 👌!  
دابا غادي ندوزو لـ **Pointers مع Structures**، وهذا موضوع مهم بزاف خصوصاً منين كتبدأ تخدم بـ data structures أو مشاريع فيها بيانات معقدة.

---

## 🔷 الهدف:

نتعلم كيفاش نستعمل **pointer** للإشارة إلى **structure**، وكيفاش نصل ونعدل القيم داخلها.

---

## 🔹 تعريف Structure بسيط:

```cpp
struct Person {
    string name;
    int age;
};
```

---

## 🔹 إنشاء Pointer لـ Structure:

```cpp
Person p1 = {"Sofiane", 21};
Person* ptr = &p1;  // pointer كيشير إلى p1
```

---

## 🔹 الوصول إلى الأعضاء:

| الطريقة           | المعنى                           |
|-------------------|----------------------------------|
| `(*ptr).name`     | الوصول لخاصية `name` عبر dereference |
| `ptr->name`       | نفس الشيء، لكن مختصرة            |

✅ **مثال عملي:**

```cpp
#include <iostream>
using namespace std;

struct Person {
    string name;
    int age;
};

int main() {
    Person p1 = {"Sofiane", 21};
    Person* ptr = &p1;

    cout << "الاسم: " << ptr->name << endl;   // Sofiane
    cout << "العمر: " << (*ptr).age << endl;  // 21

    // تعديل القيم:
    ptr->age = 22;
    cout << "العمر الجديد: " << p1.age << endl;  // 22

    return 0;
}
```

---

## 🔹 تخصيص Structure ديناميكيًا باستخدام new:

```cpp
Person* p = new Person;
p->name = "Ali";
p->age = 30;

cout << p->name << " عندو " << p->age << " عام" << endl;

delete p;  // ✅ من بعد ما تسالي، خاصك تحرر الذاكرة
```

---

## 🔹 Structure Array + Pointer

```cpp
Person people[2] = {
    {"Ahmed", 25},
    {"Sara", 20}
};

Person* p = people;

cout << p[1].name << endl;  // Sara
```

---

## ✨ خلاصة:

| الحاجة        | Pointer                        |
|---------------|--------------------------------|
| الإشارة إلى Structure | `Person* p = &p1;`           |
| الوصول إلى الأعضاء     | `p->member` أو `(*p).member` |
| مع new         | `Person* p = new Person;`     |
| التحرير        | `delete p;`                  |

---


