ุฒููู ุจุฒุงู ุณููุงูุ ุฃูู ูุชุณูู ุนูู **ุงูุฃุฎุทุงุก ุงูุดุงุฆุนุฉ ูุน ุงูู Pointers**ุ ุญูุซ ูุนูุงู pointers ููุชุทูุจู ุงูุญุฐุฑุ ูุฃู ุฒูุฉ ุตุบูุฑุฉ ุชูุฏุฑ ุชุณุจุจ crash ุฃู ุฃุฎุทุงุก ุตุนูุจุฉ ูุงูุชุตุญูุญ (debugging).

ุฏุงุจุง ููุฑูู ุฃุดูุฑ ุงูุฃุฎุทุงุก ูุน ุฃูุซูุฉ ูุดูู ุฎุงุต ุชุฏูุฑ ุจุงุด ุชุชุฌูุจูู:

---

## โ 1. Dereferencing Pointer ุบูุฑ ูููุฃ (Uninitialized Pointer)

```cpp
int* p;
*p = 5;  // ๐ฅ ุฎุทุฃ! p ูุง ูุชุดูุฑ ูุญุชู ุญุงุฌุฉ
```

๐ **ุงููุดูู**: `p` ูุง ูุฏูุชุด ูููุง ุนููุงู ูุชุบูุฑุ ูุฏุฑุชู dereference.

โ **ุงูุญู**:

```cpp
int x = 5;
int* p = &x;
*p = 10;  // โ ุงูุขู ุตุญูุญ
```

---

## โ 2. ูุณูุงู ุชููุฆุฉ ุงูู Pointer ุจู nullptr

```cpp
int* p = nullptr;

if (*p == 10) {  // ๐ฅ ุฎุทุฑ! dereferencing null pointer
    // ...
}
```

โ **ุงูุญู**: ุชุญูู ุฏุงูููุง ูู ุฃู pointer ูุงุดู `nullptr` ูุจู ุงุณุชุนูุงูู.

```cpp
if (p != nullptr && *p == 10) {
    // โ ุขูู
}
```

---

## โ 3. Memory Leak (ูุณูุงู ุชุญุฑูุฑ ุงูุฐุงูุฑุฉ)

```cpp
int* p = new int(10);
// ุงุณุชุฎุฏุงู p...
// ูุณู ุญุฐููุง
```

๐ **ุงููุดูู**: ููุฏุงู ุงููุตูู ููุฐุงูุฑุฉ ุงููู ุฎุตุตูุงูุง โ ุชุณุฑุจ ุฐุงูุฑุฉ.

โ **ุงูุญู**:

```cpp
delete p;
p = nullptr;
```

---

## โ 4. ุงุณุชุฎุฏุงู Pointer ุจุนุฏ ูุง ุชุญุฐู ุงูุฐุงูุฑุฉ (Dangling Pointer)

```cpp
int* p = new int(10);
delete p;
*p = 20;  // ๐ฅ ูุงุฑุซุฉ! ูุชุนุฏู ุนูู ููุงู ูุญุฐูู
```

โ **ุงูุญู**:

```cpp
delete p;
p = nullptr;  // ๐ ุฎููู ูุงุถุญ ุจุฃู pointer ูุง ุจูู ููู ูุงูู
```

---

## โ 5. Array Out of Bounds ุนุจุฑ Pointer

```cpp
int arr[3] = {1, 2, 3};
int* p = arr;
cout << *(p + 5);  // ๐ฅ ุฎุงุฑุฌ ุญุฏูุฏ ุงููุตูููุฉ
```

๐ **ุงููุดูู**: ูุชุฎุฑุฌ ุนูู ุญุฏูุฏ ุงููุตูููุฉุ ูุงููุชูุฌุฉ ุบูุฑ ูุถูููุฉ (ุฃู crash).

โ **ุงูุญู**: ุชุฃูุฏ ุจุฃูู ูุชุณุชุนูู index ุฃู offset ุตุงูุญ.

---

## โ 6. Multiple Deletes (ุญุฐู ููุณ ุงูุนููุงู ุฃูุซุฑ ูู ูุฑุฉ)

```cpp
int* p = new int(10);
int* q = p;

delete p;
delete q;  // ๐ฅ ููุณ ุงูุนููุงู ุชุญุฐู ูุฑุชูู
```

โ **ุงูุญู**:

```cpp
delete p;
q = nullptr;  // ๐ ูุง ุชุจูุงุด ุชูุฏุฑ ุชุญุฐู ููุณ ุงูุนููุงู ูุฑุฉ ุฃุฎุฑู
```

---

## โ 7. ุนุฏู ุงุณุชุฎุฏุงู `const` ูุน pointers ุฅูู ูุนุทูุงุช ูุง ูุฌุจ ุชุบููุฑูุง

```cpp
void print(const int* p) {
    // ูุง ูููู ุชุบููุฑ *p ููุงุ ููุฐุง ุขูู
}
```

โ ุงุณุชุนูู `const` ูุญูุงูุฉ ุงูุจูุงูุงุช ูู ุงูุชุนุฏูู ุบูุฑ ุงูููุตูุฏ.

---

## โจ ูุตุงุฆุญ ุนุงูุฉ:

- ุฏุงูููุง ูููุฆ pointer ุจู `nullptr` ุฃู ุนููุงู ูุนุฑูู.
- ุงุณุชุนูู `new` ูุน `delete`ุ ู `new[]` ูุน `delete[]`.
- ููุฑ ูู ุงุณุชุนูุงู **Smart Pointers** (`std::unique_ptr`, `std::shared_ptr`) ูู C++ ุงูุญุฏูุซุฉ.

---

