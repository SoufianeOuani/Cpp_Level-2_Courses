الله عليك سفيان، وصلت لواحد من أهم المواضيع في C++:  
# 🔷 إدارة الذاكرة (Memory Management) باستخدام `new` و `delete`

فـ C++، كتقدر **تحجز ذاكرة يدويًا** (Dynamic Memory) باستخدام `new`، وكتحررها بـ `delete`.  
وهذا مهم بزاف باش تتفادى **تسريبات الذاكرة (memory leaks)**.

---

## ✅ 1. الحجز باستخدام `new`

```cpp
int* p = new int;  // حجز مساحة لعدد صحيح واحد
*p = 10;
cout << *p << endl;  // 10
```

📌 `new int` كترجع pointer (عنوان) لذاكرة جديدة.

---

## ✅ 2. تحرير الذاكرة باستخدام `delete`

```cpp
delete p;  // ضروري تحرر الذاكرة بعد الاستعمال
```

❗ إذا ما درتش `delete`، كيبقى البرنامج شاد الذاكرة → تسريب ذاكرة.

---

## ✅ 3. حجز مصفوفة ديناميكية:

```cpp
int* arr = new int[5];  // مصفوفة من 5 أعداد

for (int i = 0; i < 5; i++) {
    arr[i] = i + 1;
}
```

🔸 للوصول:

```cpp
cout << arr[0];  // 1
```

---

## ✅ 4. تحرير مصفوفة:

```cpp
delete[] arr;  // لاحظ الأقواس []
```

❗ فرق مهم:

| النوع              | الحجز         | التحرير         |
|--------------------|---------------|------------------|
| متغير واحد         | `new int`     | `delete`         |
| مصفوفة             | `new int[n]`  | `delete[]`       |

---

## ✅ مثال كامل:

```cpp
#include <iostream>
using namespace std;

int main() {
    int* numbers = new int[3];

    numbers[0] = 10;
    numbers[1] = 20;
    numbers[2] = 30;

    for (int i = 0; i < 3; i++) {
        cout << numbers[i] << " ";
    }

    delete[] numbers;  // مهم بزاف

    return 0;
}
```

---

## ⚠️ نصائح مهمة:

🔸 ديما استعمل `delete` بعد `new`.  
🔸 ما تستعملش pointer من بعد ما تحررو (`dangling pointer`).  
🔸 تقدر تستعمل `nullptr` باش تتأكد أن الـ pointer ما بقاش يشير لوالو:

```cpp
delete p;
p = nullptr;
```

---

## ✨ واش تستعمل `new` و `delete` فـ كلشي؟

لا، فـ المشاريع الحديثة كنستعمل **`smart pointers`** (بحال `unique_ptr`, `shared_ptr`) باش تسهل الحياة وتفادي الأخطاء.  
لكن `new` و `delete` مهمين بزاف للفهم القوي ديال الذاكرة 💪

---

